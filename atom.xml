<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rose&#39;s blog</title>
  <subtitle>Work hard!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-27T13:24:55.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rose Ou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bottle 总结</title>
    <link href="http://yoursite.com/2016/03/27/bottle/"/>
    <id>http://yoursite.com/2016/03/27/bottle/</id>
    <published>2016-03-27T05:51:14.000Z</published>
    <updated>2016-04-27T13:24:55.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“Bottle是一个快速，简单，轻量级的Python WSGI Web框架。它小巧但高效，整个框架只有一个文件，却自带了路径映射（route）、模板（template）、简单的数据库访问（post，get等）等web框架组件。它只依赖Python标准库。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;URL映射（Routing）：将URL请求映射到Python函数。&lt;/li&gt;
&lt;li&gt;模板（Templates）：内置了一个简单快速的模板引擎,并支持其他模板引擎，如Mako,Jinja2，cheetah等&lt;/li&gt;
&lt;li&gt;实用工具（Utilities）:内置了很多工具来提供表单数据的访问,文件上传,Cookies处理,HTTP头信息处理和访问其他HTTP相关信息的功能.）&lt;/li&gt;
&lt;li&gt;服务器（Server）：Bottle内置了一个用于开发环境的Web服务器，在生产环境下还支持paste,gae,Google App Engine,cherrypy等符合WSGI标准的HTTP服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;成熟的web框架应该有：基本HTTP请求处理、GET或POST数据的接受、模板、数据库、session等功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可是bottle并没有提供配置文件集成，数据库管理，可扩展的中间件等特性，所以它并不是开发复杂项目的第一选择。对于大型的Web程序，Bottle的功能略显不足，程序员需要手动管理模块、数据库、配置等等。&lt;/p&gt;
&lt;p&gt;而如果你只是想快速创建一个Restful API接口，或者只想用网络开发框架的做一个简单的应用，Bottle可以轻松地满足你的要求。它具备了你将需要的所有功能：路由、模板、访问请求与响应数据、支持多种网络服务器以及WebSockets等高级功能。&lt;/p&gt;
&lt;h2 id=&quot;关于安装&quot;&gt;&lt;a href=&quot;#关于安装&quot; class=&quot;headerlink&quot; title=&quot;关于安装&quot;&gt;&lt;/a&gt;关于安装&lt;/h2&gt;&lt;p&gt;前面说到它小巧，它的小巧从安装就能看出来。（在虚拟环境下）&lt;/p&gt;
&lt;p&gt;首先你可以选择安装它：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;pip install bottle==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;12.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;pip freeze &amp;gt; requirements.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以不安装它，直接下载bottle.py文件复制到自己的应用中就可以使用了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http://bottlepy.org/bottle.py
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;项目构建&quot;&gt;&lt;a href=&quot;#项目构建&quot; class=&quot;headerlink&quot; title=&quot;项目构建&quot;&gt;&lt;/a&gt;项目构建&lt;/h2&gt;&lt;p&gt;好像没有构建项目的必要，但如果你非要构建的话，这里有一个第三方开发的插件bottle-boilerplate可用来自动构建项目（这个插件star也不多..）。&lt;/p&gt;
&lt;p&gt;首先来安装它：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install bottle-boilerplate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就可以构建项目了：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;bottle startproject YOUR_PROJECT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;cd YOUR_PROJECT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;pip install -r requirements.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以看到这个项目结构是这样的（这里我创建了bottle文件夹来放我的项目，我的项目名为bottleapp）：&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|- bottle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;|- bottleapp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;|- bottleapp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;|- controllers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;string&quot;&gt;|- home.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;string&quot;&gt;|- __init__.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;|- models&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;string&quot;&gt;|- __iniy__.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;|- views&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;string&quot;&gt;|- index.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;|- __init__.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;|- routes.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;|- settings.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;|- tests&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;|- __init__.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;|- manage.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;|- README.rst&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;|- requirements.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;|- venv&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;|- requirements.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你已经可以运行它试一下,但这时候只能看到一个404的错误页面：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python -m bottle bottleapp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;讲真似乎真的没有构建项目的必要..&lt;/p&gt;
&lt;h2 id=&quot;视图函数和路由&quot;&gt;&lt;a href=&quot;#视图函数和路由&quot; class=&quot;headerlink&quot; title=&quot;视图函数和路由&quot;&gt;&lt;/a&gt;视图函数和路由&lt;/h2&gt;&lt;p&gt;Bottle内置了一个强大的route引擎，可以给每个浏览器请求找到正确的回调函数。&lt;/p&gt;
&lt;p&gt;先来看一个小小的Hello World:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bottle &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; route,run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@route(&#39;/hello&#39;)     &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;run(host=&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;, port=&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;,debug=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在浏览器请求一个URL时，框架自动调用与之相应的函数，将函数的返回值发送给浏览器。这里route()函数将“/hello”这个URL地址绑定到“hello（）”这个函数上，任何对“/hello”这个URL的请求都被递交到这个函数中。&lt;/p&gt;
&lt;p&gt;run()启动了内置的开发服务器,把指定的域名和端口作为参数传入。它监听localhost的8080端口并响应请求.但它不能满足生产环境的需求。&lt;/p&gt;
&lt;p&gt;Bottle的这种URL地址映射方法其实与flask差不多，也是使用了装饰器将函数和URL进行绑定的方法。&lt;/p&gt;
&lt;p&gt;上面的route()函数将一个URL路径与一个回调函数关联起来,然后在默认应用中添加了一个URL映射(route).你也可以在你的应用中多添加几个路由器。因为一个回调函数可绑定多个route。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@route(&#39;/&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@route(&#39;/hello/&amp;lt;name&amp;gt;&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name=&lt;span class=&quot;string&quot;&gt;&#39;Stranger&#39;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello %s!&#39;&lt;/span&gt; % name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有一个URL没有被绑定到任何回调函数上，Bottle将返回“404 Page Not Found”的错误页面。&lt;/p&gt;
&lt;p&gt;上面的栗子使用了模块层面的route()装饰器函数来定义route,这样,所有route都会添加到一个全局的”默认应用”,它是一个Bottle的实例，第一次调用route()时候会自动创建。&lt;/p&gt;
&lt;p&gt;这使其他几个模块层面的修饰器函数都与这个”默认应用”有关.为了避免使用全局范围的”默认应用”,我们可以创建一个独立的应用对象.**&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bottle &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Bottle,run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app = Bottle()    &lt;span class=&quot;comment&quot;&gt;#创建了一个Bottle对象app，然后所有函数都会映射到app的URL地址上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@app.route(&#39;/hello&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;run(app, host=&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;, port=&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样别人就可以安全地导入你的app，然后通过Bottle.mount()方法合并到他的应用中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试模式：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bottle.debug(True)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;自动重载：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bottle import &lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt;(reloader=True)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;动态路由：&quot;&gt;&lt;a href=&quot;#动态路由：&quot; class=&quot;headerlink&quot; title=&quot;动态路由：&quot;&gt;&lt;/a&gt;动态路由：&lt;/h3&gt;&lt;p&gt;动态路由就是有通配符的路由,它能匹配多个URL地址.URL中的通配符会当作参数传给回调函数,直接在回调函数中使用.在同一个route里面，这个变量名需要是唯一的。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@route(&#39;/hello/&amp;lt;name&amp;gt;&#39;)  #旧语法中为:name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name = &lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#这里定义了一个默认参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello &amp;#123;&amp;#125;!&#39;&lt;/span&gt;.format(name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;过滤器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;过滤器(Filter)可被用来定义特殊类型的通配符。在通配符传递给回调函数前,先自动转换通配符类型.包含过滤器的通配符定义一般像这样&lt;name:filter&gt;或&lt;name:filter:config&gt;.config部分可选,由被使用的过滤器决定。以下是几种过滤器:&lt;/name:filter:config&gt;&lt;/name:filter&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;:int          匹配一个整形,自动将其转换为int类型.&lt;br&gt;:float        匹配一个浮点数，自动将其转换为float&lt;br&gt;:path         匹配所有字符，包含”/“&lt;br&gt;:re[:config]  允许在config中写一个正则表达式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; HTTP请求方法 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Bottle中，未指明请求访问的路由会默认使用GET方法.要处理如POST,PUT或者DELETE等等的其它请求，必须主动地在route()函数中添加它们，或者使用装饰器：@get(),@post()等等.&lt;/p&gt;
&lt;p&gt;举一个用POST方法实现用户登录的栗子:&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from bottle import get, post, request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;)    #或&lt;span class=&quot;variable&quot;&gt;@route&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;, method = &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def login_form():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&#39;&amp;lt;form method=&lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt; action=&lt;span class=&quot;string&quot;&gt;&quot;/login&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;input name=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; type=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;input name=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; type=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;input type=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &amp;lt;/form&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@post&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;)  #或&lt;span class=&quot;variable&quot;&gt;@route&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;, method = &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def login_submit():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	name = request.forms.get(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	password = request.forms.get(&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if check_login(name, password):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;p&amp;gt;Your login was correct&amp;lt;/p&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;p&amp;gt;Login failed&amp;lt;/p&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个栗子中，/login绑定了两个回调函数，一个回调函数响应GET请求，另一个响应POST请求。若浏览器用GET请求访问/login，则调用login_form()来返回登录界面，浏览器用POST方法提交表单后，调用login_submit()函数来检查用户有效性，并返回登录结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 静态文件 &lt;/strong&gt;&lt;br&gt;Bottle内置的服务器不会自动处理像图片或CSS文件的静态文件请求。你需要给静态文件提供一个路由（告诉服务器哪些文件需要服务），一个回调函数（用来查找和控制静态文件的访问。）&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bottle &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; static_file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@route(&#39;/static/&amp;lt;filename&amp;gt;&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;server_static&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(filename)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; static_file(filename,root=&lt;span class=&quot;string&quot;&gt;&#39;/path/to/your/static/files&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;static_file()函数用来返回静态文件请求，上面的示例中，我们只返回”/path/to/your/static/files”路径下的文件，如果我们想要响应“/path/to/your/static/files”目录的子目录下的文件请求，那么我们可以使用一个格式化的通配符：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@route(&#39;/static/&amp;lt;filepath:path&amp;gt;&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;server_static&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(filepath)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; static_file(filepath, root=&lt;span class=&quot;string&quot;&gt;&#39;/path/to/your/static/files&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用root=’./static/files’这样的相对路径时，注意当前工作目录（./）不一定是项目文件夹。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 错误页面 &lt;/strong&gt;&lt;br&gt;如果任何请求的URL没有的到匹配的回调函数，Bottle会返回一个默认的错误页面，提供足够的debug信息。你也可以用error()设置自己的相关回调函数，自定义错误页面：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bottle &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@error(404)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error404&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(error)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Nothing here, sorry!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里传给error404函数的唯一参数是一个HTTPError对象的实例。除此，这个回调函数与我们用来响应普通请求的回调函数没有不同。你可以从request中读取数据，往response中写入数据和返回所有HTTPError支持的数据类型。&lt;br&gt;只有在你的应用返回或raise一个HTTPError异常的时候，处理Error的函数才会被调用。更改Request，status或返回HTTPResponse不会触发错误处理函数。&lt;/p&gt;
&lt;h2 id=&quot;前端模板&quot;&gt;&lt;a href=&quot;#前端模板&quot; class=&quot;headerlink&quot; title=&quot;前端模板&quot;&gt;&lt;/a&gt;前端模板&lt;/h2&gt;&lt;p&gt;Bottle内置了一个快速且强大的模板引擎，SimpleTemplateEngine(stpl)。你可以使用template（）函数或者view（）装饰器来渲染一个模板，（这两个函数默认调用的模板引擎就是SimpleTemplate）你只要提供模板的名字和传递给模板的变量，下面是一个简单的栗子：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@route(&#39;/hello&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@route(&#39;/hello/&amp;lt;name&amp;gt;&#39;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name=&lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; template(&lt;span class=&quot;string&quot;&gt;&#39;hello_template&#39;&lt;/span&gt;, name=name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这将加载hello_template.tpl模板文件，并提供name变量，并渲染它，再将结果返回给浏览器。默认情况，Bottle会在./views/查找模板文件。你可以在bottle.TEMPLATE_PATH这个列表中添加模板路径。&lt;/p&gt;
&lt;p&gt;view()装饰器允许你在回调函数中返回一个字典，并将其传递给模板。来一个栗子：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@route&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/hello&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@route&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/hello/&amp;lt;name&amp;gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@view&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;hello_template&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def hello(name=&lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return dict(name=name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;SimpleTemplate的语法&quot;&gt;&lt;a href=&quot;#SimpleTemplate的语法&quot; class=&quot;headerlink&quot; title=&quot;SimpleTemplate的语法&quot;&gt;&lt;/a&gt;SimpleTemplate的语法&lt;/h4&gt;&lt;p&gt;python对空白敏感的语法使它很难作为一个模板语言。SimpleTemplate移除了一些限制。SimpleTemplate模板会被编译为python字节码，且在每次通过SimpleTemplate.render()渲染时执行。&lt;br&gt;注意：编译模板和渲染模板是两件事。通常模板只会被编译一次，然后会被缓存起来，但是会根据不同的参数，被多次渲染。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内嵌语句&lt;/strong&gt;&lt;br&gt;只要在括号中的python语句返回一个字符串或有一个字符串的表达形式，它就是一个有效的语句。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;template(&lt;span class=&quot;string&quot;&gt;&#39;Hello &amp;#123;&amp;#123;name&amp;#125;&amp;#125;!&#39;&lt;/span&gt;, name=&lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;u&#39;Hello World!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;template(&lt;span class=&quot;string&quot;&gt;&#39;Hello &amp;#123;&amp;#123;name.title() if name else &quot;stranger&quot;&amp;#125;&amp;#125;!&#39;&lt;/span&gt;, name=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;u&#39;Hello stranger!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;template(&lt;span class=&quot;string&quot;&gt;&#39;Hello &amp;#123;&amp;#123;name.title() if name else &quot;stranger&quot;&amp;#125;&amp;#125;!&#39;&lt;/span&gt;, name=&lt;span class=&quot;string&quot;&gt;&#39;mArC&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;u&#39;Hello Marc!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;括号中的python语句会在渲染的时候被执行，可访问传递给SimpleTemplate.render()方法的所有参数。默认情况下，它会自动转义HTML标签以防止XSS攻击。可在语句前加上“！”来关闭自动转义。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;template(&lt;span class=&quot;string&quot;&gt;&#39;Hello &amp;#123;&amp;#123;name&amp;#125;&amp;#125;!&#39;&lt;/span&gt;, name=&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;u&#39;Hello &amp;amp;lt;b&amp;amp;gt;World&amp;amp;lt;/b&amp;amp;gt;!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;template(&lt;span class=&quot;string&quot;&gt;&#39;Hello &amp;#123;&amp;#123;!name&amp;#125;&amp;#125;!&#39;&lt;/span&gt;, name=&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;u&#39;Hello &amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt;!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;嵌入python代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个模板的语法类似于python的语法，它会确保语句块的正确缩进，所以你在写模板时不用担心缩进问题。&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;h1&amp;gt; Hello &lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&lt;/span&gt; &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt; This is a test.&amp;lt;/p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&lt;span class=&quot;symbol&quot;&gt;else:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;h1&amp;gt;Hello &lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123;name.title()&amp;#125;&amp;#125;&lt;/span&gt;！&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;How are you?&amp;lt;/p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一行以%开头，表明这一行是python代码。它和真正的python代码唯一的区别，在于你需要显式地在末尾添加%end语句，表明一个代码块结束。这样你就不必担心python代码中的缩进问题，SimpleTemplate模板引擎帮你处理了。不以%开头的行被当作普通文本来渲染。&lt;/p&gt;
&lt;p&gt;只有在行首的%字符才有意义，可以使用%%来转义。&lt;/p&gt;
&lt;p&gt;注意：模板在经过编译后会缓存在内存中，所以你在修改模板文件后，要调用bottle.TEMPLATES.clear()函数手工清除缓存，才能看到效果。而在debug模式下，缓存会被禁用，于是就无需手动清除缓存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;防止换行&lt;/strong&gt;&lt;br&gt;在一行代码前面加上\来防止换行。&lt;/p&gt;
&lt;figure class=&quot;highlight mojolicious&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;perl&quot;&gt;%if True:&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nobreak\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;perl&quot;&gt;%end&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该模板会输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span&amp;gt;nobreak&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;模板继承&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%include语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可使用%include sub——template[kwargs]语句来包含其他模板。sub_template参数是模板的文件名或路径。[kwargs]部分是以逗号分开的键值对，是传给其他模板的参数。&lt;/p&gt;
&lt;figure class=&quot;highlight mojolicious&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;perl&quot;&gt;%include header_template title=&lt;span class=&quot;string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;perl&quot;&gt;%include footer_template&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;%rebase语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;%rebase base_template [kwargs]语句会渲染base_template这个模板，而不是原先的模板。然后base_template中使用一个空%include语句来包含原先的模板，并可访问所有通过kwargs传过来的参数。这样就可用模板来封装另一个模板，或是模拟引擎中的继承机制。**&lt;br&gt;假设现在有一个与内容有关的模板，想在它上面加一层普通的HTML层。为了避免include一堆模板，可以用一个基础模板。&lt;/p&gt;
&lt;p&gt;名为layout.tpl的基础模板&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;title&amp;gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123;title or &lt;span class=&quot;string&quot;&gt;&#39;No title&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	%&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;名为 content.tpl的主模板&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This is the page &lt;span class=&quot;symbol&quot;&gt;content:&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123;content&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%rebase layout title=&lt;span class=&quot;string&quot;&gt;&#39;Content Title&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后来渲染content.tpl&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print template(&lt;span class=&quot;string&quot;&gt;&#39;content&#39;&lt;/span&gt;, content=&lt;span class=&quot;string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Content Title&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	This is the page content:Hello World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;模板内置函数&lt;/strong&gt;&lt;br&gt;在模板中访问一个未定义的变量会导致NameError异常，并立即终止模板的渲染。在抛出异常前，你无法检查变量是否被定义。当你想让输入更灵活或想在不同情况下使用同一个模板时，就很烦人了。SimpleTemplate模板引擎内置了三个函数来解决这个问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;defined(name):如果变量已定义则返回True，反之返回False&lt;br&gt;get(name,default=None):返回该变量，或一个默认值&lt;br&gt;setdefault(name,default):如果该变量未定义，则定义它，赋一个默认值，返回该变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面这个栗子使用了这些函数，实现了模板中的可选参数：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% setdefault(&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;No Text&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h1&amp;gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123;get(&lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;No Title&#39;&lt;/span&gt;)&amp;#125;&amp;#125;&lt;/span&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt; &amp;#123;&amp;#123; text &amp;#125;&amp;#125; &amp;lt;/p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; defined(&lt;span class=&quot;string&quot;&gt;&#39;author&#39;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;By &lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; author &amp;#125;&amp;#125;&lt;/span&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h2&gt;&lt;p&gt;Bottle没有orm，没有专门封装数据库操作，不能直接支持数据库，需要通过一些插件实现。&lt;/p&gt;
&lt;p&gt;如果你确实想在你的应用里使用数据库，寻求ORM支持，你可以选择使用SQLAlchemy,PyMongo,MongoEngine, CouchDB等。&lt;/p&gt;
&lt;p&gt;所以如果你需要开发基于数据库的网站，且数据库的结构不会经常变化，那最好使用大型Python Web框架。而如果你的网站使用的是关系数据库，就可以不使用大型框架，直接用bottle、flask这类框架结合关系数据库模块就行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Key/Value数据库 &lt;/strong&gt;&lt;br&gt;Bottle通过bottle.db模块变量提供一个key/value数据库.存储的对象类似dict字典,keys和values必须是字符串.不支持items()，values()这些方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bottle-mysql&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install bottle-mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;“Bottle-MySQL is a plugin that integrates MySQL with your Bottle application. It automatically connects to a database at the beginning of a request, passes the database handle to the route callback and closes the connection afterwards.”&lt;br&gt;“Bottle-MySQL是一个能够将你的应用和MySQL整合起来的插件。它在请求开始的时自动地连接上数据库，通过数据库句柄到路由回调，最后关闭连接。”&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;import&lt;/span&gt; bottle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;import&lt;/span&gt; bottle_mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;app&lt;/span&gt; = bottle.Bottle()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;plugin&lt;/span&gt; = bottle_mysql.Plugin(&lt;span class=&quot;attr&quot;&gt;dbuser=&#39;user&#39;,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;dbpass=&#39;pass&#39;,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;dbname=&#39;db&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.install(plugin)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以直接用python的数据库模块MYSQLdb来连接MYSQL，直接import MYSQLdb就可以。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Bottle-SQLite &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个插件让在Bottle应用中使用sqlite数据库变得简单。你只要在route的回调函数里添加一个‘db’参数，就能使用数据库链接了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install bottle-sqlite
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;API编写与参考&quot;&gt;&lt;a href=&quot;#API编写与参考&quot; class=&quot;headerlink&quot; title=&quot;API编写与参考&quot;&gt;&lt;/a&gt;API编写与参考&lt;/h2&gt;&lt;p&gt;也是跟flask差不多，不同的是它可以把HTTP请求方法作装饰器用.&lt;/p&gt;
&lt;p&gt;一个简单的栗子：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bottle &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; request, response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bottle &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; post, get, put, delete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_names = set()           &lt;span class=&quot;comment&quot;&gt;# the set of names&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@post(&#39;/names&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;creation_handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;Handles name creation&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@get(&#39;/names&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;listing_handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;Handles name listing&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@put(&#39;/names/&amp;lt;name&amp;gt;&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update_handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;Handles name updates&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@delete(&#39;/names/&amp;lt;name&amp;gt;&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delete_handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;Handles name deletions&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以单独创建一个API文档，将上面这段代码保存为names.py，然后再建立一个main.py文件。&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;import&lt;/span&gt; bottle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from api &lt;span class=&quot;built_in&quot;&gt;import&lt;/span&gt; names&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;app&lt;/span&gt; = &lt;span class=&quot;attr&quot;&gt;application&lt;/span&gt; = bottle.default_app()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;__name__&lt;/span&gt; == &#39;__main__&#39;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bottle.run(&lt;span class=&quot;attr&quot;&gt;host&lt;/span&gt; = &#39;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;&#39;, &lt;span class=&quot;attr&quot;&gt;port&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;：&lt;br&gt;&lt;a href=&quot;http://wenku.baidu.com/link?url=AXvHmcyWezZ7MK0RTN89X4QGP91IN-Nyl1cD1V94QeCdFu5k9AqzwjPzi_4CDSCY3arrp-RtYtSyH6FBOXYuvuPIrh6QQNan4F8-N2jCoAa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API参考&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.bottlepy.org/docs/dev/api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API Reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目部署&quot;&gt;&lt;a href=&quot;#项目部署&quot; class=&quot;headerlink&quot; title=&quot;项目部署&quot;&gt;&lt;/a&gt;项目部署&lt;/h2&gt;&lt;p&gt;Bottle默认运行在它内置的随python一起发布的WSGI reference Server服务器上。这个单线程的HTTP服务器在开发时很有用，但是性能较低.&lt;br&gt;最简单的增加性能的办法是安装一个多线程的服务器库，例如paste或者cherrypy ，并告诉 Bottle 使用它来替代单线程的服务器:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bottle.run(server=&amp;apos;paste&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认地，Bottle会监听127.0.1的8080端口，如果想更改它，就更改run函数的参数。当Bottle运行在其他服务器上时，port和host参数依然适用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;run(port=80,host=&amp;apos;123.45.67.89&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为这个服务器是单线程的，一次只能响应一个请求，可是Bottle已经可以工作在很多多线程的服务器上了，所以还是建议在大型项目上使用高性能服务器。&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Bottle v0&lt;span class=&quot;number&quot;&gt;.12&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt; server starting up (using WSGIRefServer())&lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Listening &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; http:&lt;span class=&quot;comment&quot;&gt;//127.0.0.1:8080/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hit Ctrl&lt;span class=&quot;attr&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; quit.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;其他特性（待加入）&quot;&gt;&lt;a href=&quot;#其他特性（待加入）&quot; class=&quot;headerlink&quot; title=&quot;其他特性（待加入）&quot;&gt;&lt;/a&gt;其他特性（待加入）&lt;/h2&gt;&lt;h3 id=&quot;Session&quot;&gt;&lt;a href=&quot;#Session&quot; class=&quot;headerlink&quot; title=&quot;Session&quot;&gt;&lt;/a&gt;Session&lt;/h3&gt;&lt;p&gt;Bottle自身没有提供Session(处理用户在多次请求之间需要存储的数据)的支持，但可以使用&lt;a href=&quot;http://beaker.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;beaker&lt;/a&gt;中间件来实现。&lt;br&gt;Beaker是一个缓存和会话的库，与Web应用程序和独立的Python脚本及应用程序一起使用。它是WSGI的中间件，能够很简单地嵌入，与基于WSGI的Web应用程序一起使用，并且缓存修饰器对于任何基于Python的应用程序都是容易使用的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install beaker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;栗子：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bottle &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; route, run ,redirect,request,default_app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; beaker.middleware &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SessionMiddleware&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#设置session参数（Session数据存放在&#39;/tmp/&#39;目录里面，/tmp/有个机制，会自动清理30天后末使用过的文件，有点类型于回收站，所以你不需要担心session文件不断增多的问题。）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session_opts = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;session.type&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;,                   &lt;span class=&quot;comment&quot;&gt;# 以文件的方式保存session&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;session.cookei_expires&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt;,       &lt;span class=&quot;comment&quot;&gt;# session过期时间为3600秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;session.data_dir&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;/tmp/sessions&#39;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;# session存放路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;sessioni.auto&#39;&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app = SessionMiddleware(bottle.app(), session_opts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@bottle.route(&#39;/test&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s = bottle.request.environ.get(&lt;span class=&quot;string&quot;&gt;&#39;beaker.session&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#获取session,则获取环境变量中的beaker.session对象，并赋值给s，然后我们就可以用字典的方式，往s里面添加一些我们要存进去的数据，如帐号名，帐号id，权限等等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s[&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;] = s.get(&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#从session中获取Key为test的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s.save()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Test counter: %d&#39;&lt;/span&gt; % s[&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bottle.run(app=app,host=&lt;span class=&quot;string&quot;&gt;&#39;0.0.0.0&#39;&lt;/span&gt;, port=&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;,debug=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;一些推荐的可用的插件&quot;&gt;&lt;a href=&quot;#一些推荐的可用的插件&quot; class=&quot;headerlink&quot; title=&quot;一些推荐的可用的插件&quot;&gt;&lt;/a&gt;一些推荐的可用的插件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Bottle-Beaker:Beaker to session and caching library with WSGI Middleware&lt;br&gt;Bottle-Cork:Cork provides a simple set of methods to implement Authentication and Authorization in web applications based on Bottle.&lt;br&gt;Bottle-Extras:Meta package to install the bottle plugin collection.&lt;br&gt;Bottle-Flash:flash plugin for bottle&lt;br&gt;Bottle-Hotqueue:FIFO Queue for Bottle built upon redis&lt;br&gt;Macaron:Macaron is an object-relational mapper (ORM) for SQLite.&lt;br&gt;Bottle-Memcache:Memcache integration for Bottle.&lt;br&gt;Bottle-Mongo:MongoDB integration for Bottle&lt;br&gt;Bottle-Redis:Redis integration for Bottle.&lt;br&gt;Bottle-Renderer:Renderer plugin for bottle&lt;br&gt;Bottle-ServefilesA reusable app that serves static files for bottle apps&lt;br&gt;Bottle-Sqlalchemy:SQLAlchemy integration for Bottle.&lt;br&gt;Bottle-Sqlite:SQLite3 database integration for Bottle.&lt;br&gt;Bottle-Web2pydal:Web2py Dal integration for Bottle.&lt;br&gt;Bottle-Werkzeug:Integrates the werkzeug library (alternative request and response objects, advanced debugging middleware and more)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Bottle学习资源&quot;&gt;&lt;a href=&quot;#Bottle学习资源&quot; class=&quot;headerlink&quot; title=&quot;Bottle学习资源&quot;&gt;&lt;/a&gt;Bottle学习资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PS：因为Bottle真的太小了，以至于网上关于它的资料也比较少，而且基本上都是差不多的，感觉官方文档也不是很全面，相关的书也没有，于是只能大量百度和google来搜集资料学习。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.bottlepy.org/docs/dev/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottle: Python Web Framework&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://download.csdn.net/detail/cuihairu/8333909&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottle v0.11中文文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jb51.net/article/63736.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简单介绍Python的轻便web框架Bottle&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.linuxyw.com/category/bottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bottle框架基础教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.maiziedu.com/course/python/494-6414/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottle web 开发 （视频）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ju.outofmemory.cn/entry/220152&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;几个bottle插件&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pypi.python.org/pypi/bottle-mysql/0.1.4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bottle-mysql 0.1.4&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.devstore.cn/essay/essayInfo/5446.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python Web框架&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/f796428ceaae&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottle手册(0.13-dev)中文翻译&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cizixs.com/2016/01/20/dive-into-bottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bottle 源码解析&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://rwpy4l.readthedocs.org/en/latest/ch05/TryBottle.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;初窥Bottle&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lovedata.cn/ec/Python/2015/1204/7161.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python程序员都会喜欢的6个库&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lovedata.cn/ec/Python/2015/1204/7161.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bottle中文&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://chenpeng.info/html/2155&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微型Python Web框架 Bottl&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/happyteafriends/article/details/42552093&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bottle中文教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.zgxue.com/169/1698482.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python的Bottle框架的一些使用技巧介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.bubuko.com/infodetail-1114779.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottle框架常见的几个坑&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wenku.baidu.com/link?url=AXvHmcyWezZ7MK0RTN89X4QGP91IN-Nyl1cD1V94QeCdFu5k9AqzwjPzi_4CDSCY3arrp-RtYtSyH6FBOXYuvuPIrh6QQNan4F8-N2jCoAa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottle API 参考 中文&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.avelino.xxx/2015/02/where-to-start-a-project-with-bottle-boilerplate#toc_0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Where to start a project with bottle, Boilerplate&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_8d0ab46b0102whrd.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python3 bottle Web开发系列教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.toptal.com/bottle/building-a-rest-api-with-bottle-framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building a Rest API with the Bottle Framework&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://realpython.com/blog/python/developing-with-bottle-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Developing With Bottle&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://article.yeeyan.org/view/35282/126927&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottle API 参考&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“Bottle是一个快速，简单，轻量级的Python WSGI Web框架。它小巧但高效，整个框架只有一个文件，却
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 函数的参数</title>
    <link href="http://yoursite.com/2016/03/16/python-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2016/03/16/python-函数的参数/</id>
    <published>2016-03-16T15:22:27.000Z</published>
    <updated>2016-04-27T13:20:29.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;因为一直不是很理解函数的参数，然后复习的时候就总结了一下，免得以后又忘记…&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;位置参数&quot;&gt;&lt;a href=&quot;#位置参数&quot; class=&quot;headerlink&quot; title=&quot;位置参数&quot;&gt;&lt;/a&gt;位置参数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;调用函数时，传入函数的参数的位置（顺序）一一对应着定义函数时参数的位置，且传入函数的参数与函数声明时的参数数目必须一致,不然会报错。看看栗子：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y,z)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x,y,z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; f(x,y,z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y,z)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x,z,y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; g(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;第二个函数中，先返回z，再返回y。因为声明函数时参数名的位置，与调用时所传参数位置是相对应的，所以其实在两个函数中，都是x=1，y=2，z=3，而输出的结果是由return的顺序来决定的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;关键字参数&quot;&gt;&lt;a href=&quot;#关键字参数&quot; class=&quot;headerlink&quot; title=&quot;关键字参数&quot;&gt;&lt;/a&gt;关键字参数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;关键字参数其实就是给参数起一个名字。调用函数的时候就是通过参数的名字来区分参数，而不是它们的位置、顺序。于是，调用函数时，参数的数目和顺序都不一定要对应定义函数时的参数数目和顺序（即允许参数缺失和不按顺序）。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先你可以直接按照函数声明中参数定义的顺序来调用它（这样看起来就跟位置函数没什么区别了..）：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name,age)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%s is %s years old.&#39;&lt;/span&gt; % (name,age)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; f(&lt;span class=&quot;string&quot;&gt;&#39;Rose&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;eighteen&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Rose &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; eighteen years old.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;再来看看如何不按顺序地调用它（这样就稍微看出来一点区别了..）：**&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; f(age=&lt;span class=&quot;string&quot;&gt;&#39;eighteen&#39;&lt;/span&gt;,name=&lt;span class=&quot;string&quot;&gt;&#39;Rose&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Rose &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; eighteen years old.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;然后来看看如何数目不对应地调用它：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关键字参数可以在定义函数时设置关键字参数默认值，也就是默认参数。上面提到过允许参数缺失，这个就是和默认参数有关了。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;默认参数就是，在函数声明中就给参数提供一个值。这样在调用函数时，如果没有为参数传递一个值，那么这个参数就会取默认值。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name=&lt;span class=&quot;string&quot;&gt;&#39;Rose&#39;&lt;/span&gt;,age=&lt;span class=&quot;string&quot;&gt;&#39;eighteen&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%s is %s years old.&#39;&lt;/span&gt; % (name,age)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt;print f()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Rose is eighteen years old.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;你也可以在调用函数时传入新参数：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; f(&lt;span class=&quot;string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jack &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; eighteen years old.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; f(&lt;span class=&quot;string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;nineteen&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jack &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; nineteen years old.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;可是如果想name使用默认参数，而age传入新参数该怎么办？别忘了它可是关键字参数！（虽然上面这个例子按顺序传入参数让它看起来就像位置参数..）&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;所以可以这样：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; f(age=&lt;span class=&quot;string&quot;&gt;&#39;nineteen&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Rose &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; nineteen years old.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意：声明函数时，所有的位置参数都必须出现在任何一个默认参数前面。否则会报错。而且在调用函数的时候，一定要给位置参数提供值。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;可变长度的参数&quot;&gt;&lt;a href=&quot;#可变长度的参数&quot; class=&quot;headerlink&quot; title=&quot;可变长度的参数&quot;&gt;&lt;/a&gt;可变长度的参数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;调用函数时，有时候可能会需要处理可变数量的参数。这种参数在函数声明中不是显式命名的，因为在调用函数之前，参数的数目是未知的。于是我们可以将参数放在一个元组（非关键字参数）或字典中（关键字参数），作为一个参数组传递给函数。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;非关键字可变长参数（元组）&quot;&gt;&lt;a href=&quot;#非关键字可变长参数（元组）&quot; class=&quot;headerlink&quot; title=&quot;非关键字可变长参数（元组）&quot;&gt;&lt;/a&gt;非关键字可变长参数（元组）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;当函数被调用时，所有的形参（位置参数和默认参数）都将值赋给了在函数声明时相对应的部分参数，然后剩下那部分非关键字参数就会按顺序插入到一个元组。这个元组是以一个*号开头的。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;*号操作符后的形参会作为元组传递给函数，元组保存了调用函数时所有传递给函数的“额外”的参数（匹配了所有位置参数和关键字参数剩余的）。而如果没有额外的参数，这个元组就为空元祖。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,*args)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;第一个位置参数被赋了1的值，剩下的参数全部保存在*args这个元组里。于是我们就可以处理当超出数目的参数被传入函数的情形。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：所有形式参数必须放在非关键字可变长参数的前面。&lt;/li&gt;
&lt;li&gt;先来举个栗子：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y=&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;,*args)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;x:&#39;&lt;/span&gt;, x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;y:&#39;&lt;/span&gt;, y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; args:    &lt;span class=&quot;comment&quot;&gt;#遍历元组中参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;args:&#39;&lt;/span&gt;, i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;好，调用这个函数试试看。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:abc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;xyz&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:abc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:xyz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;关键字变量参数（字典）&quot;&gt;&lt;a href=&quot;#关键字变量参数（字典）&quot; class=&quot;headerlink&quot; title=&quot;关键字变量参数（字典）&quot;&gt;&lt;/a&gt;关键字变量参数（字典）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;它就是保存“额外”的关键字参数的字典，这个字典以**开头。其参数名是字典的键。（关键字参数有着参数名和参数值，所以元组没法满足它，于是要用字典。）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栗子：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y,*args,**kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;x:&#39;&lt;/span&gt;, x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;y:&#39;&lt;/span&gt;, y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; m &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; args:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;non-keyword arg:&#39;&lt;/span&gt;, m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; kwargs.keys():         &lt;span class=&quot;comment&quot;&gt;#遍历字典的键，因为参数名是字典的键&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;keyword arg &#39;%s&#39;: %s&quot;&lt;/span&gt; % (n,kwargs[n])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;好，来调用它。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;f(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;xyz&#39;&lt;/span&gt;,q=&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;,w=&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;x:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;non-keyword &lt;span class=&quot;string&quot;&gt;arg:&lt;/span&gt;abc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;non-keyword &lt;span class=&quot;string&quot;&gt;arg:&lt;/span&gt;xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keyword arg &lt;span class=&quot;string&quot;&gt;&#39;q&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keyword arg &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;还可以这样调用：&lt;/strong&gt;    &lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;f(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,*(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;),**&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;x:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;non-keyword &lt;span class=&quot;string&quot;&gt;arg:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;non-keyword &lt;span class=&quot;string&quot;&gt;arg:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keyword arg &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keyword arg &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;还有这样：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; tuple = (&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; dict = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; f(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,b=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,*tuple,**dict)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;x:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;y:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;non-keyword &lt;span class=&quot;symbol&quot;&gt;arg:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;non-keyword &lt;span class=&quot;symbol&quot;&gt;arg:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;non-keyword &lt;span class=&quot;symbol&quot;&gt;arg:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keyword arg &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keyword arg &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;这里很奇怪的是，调用函数时，对于元组，先将3传入并返回，然后再将元组里的元素作为参数传入并返回；而对于字典，顺序刚好相反，这是为什么呢？不知道..没想出来..&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：关键字参数应为函数定义的最后一个参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;所以这些参数的定义顺序为：位置参数，关键字参数，非关键字可变长参数，关键字变量参数。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;因为一直不是很理解函数的参数，然后复习的时候就总结了一下，免得以后又忘记…&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;位置参数&quot;&gt;&lt;a href=&quot;#位置参数&quot; class=&quot;headerlink&quot; title=&quot;位置参数&quot;&gt;&lt;/a&gt;位置参数&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RESTful API 小结</title>
    <link href="http://yoursite.com/2016/02/24/RESTful-API%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2016/02/24/RESTful-API小结/</id>
    <published>2016-02-24T14:55:43.000Z</published>
    <updated>2016-02-24T15:21:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;REST（Representational-State-Transfer）&quot;&gt;&lt;a href=&quot;#REST（Representational-State-Transfer）&quot; class=&quot;headerlink&quot; title=&quot;REST（Representational State Transfer）&quot;&gt;&lt;/a&gt;REST（Representational State Transfer）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;REST全称Representational State Transfer，译为“表现层状态转化”，REST指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-表现层-Representation&quot;&gt;&lt;a href=&quot;#1-表现层-Representation&quot; class=&quot;headerlink&quot; title=&quot;1.表现层 Representation&quot;&gt;&lt;/a&gt;1.表现层 Representation&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;“表现层”实际指的是“资源”的“表现层”。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“资源”，就是网络上一个实体或者说一个具体信息，例如一段文本、一张图片、一首歌等，每种“资源”用一个特定的URI指向，因此URI就成了每一个资源的地址或独一无二的识别符，获取这个资源，访问它的URI就可以。（”上网”，就是调用互联网上的资源的URI。）&lt;/li&gt;
&lt;li&gt;“表现层”就是“资源”呈现出来的形式。比如，文本可以用txt格式表现，也可以用HTML格式、XML格式等表示。URI只代表”资源”的位置。它的具体表现形式即表现层，应该在HTTP请求的头信息中用Accept和Content-Type字段指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-状态转化-State-Transfer&quot;&gt;&lt;a href=&quot;#2-状态转化-State-Transfer&quot; class=&quot;headerlink&quot; title=&quot;2.状态转化 State Transfer&quot;&gt;&lt;/a&gt;2.状态转化 State Transfer&lt;/h3&gt;&lt;p&gt;客户端和服务器的互动过程中，涉及到数据和状态的变化。HTTP协议，是一个无状态协议。所以，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，对服务器端资源进行操作，必须通过某种手段，让服务器端发生”状态转化”。这种转化建立在表现层之上，所以就是”表现层状态转化”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端用到的手段，就是HTTP协议里的方法：&lt;blockquote&gt;
&lt;p&gt;GET：获取一个资源或者一个集合的所有资源&lt;br&gt;POST：在服务器上新建资源&lt;br&gt;PUT：更新服务器上的资源(提供整个修改后的资源)&lt;br&gt;PATCH：更新服务器上的资源(只提供需要修改的部分)&lt;br&gt;DELETE：从服务器上删除一个资源&lt;br&gt;HEAD：获取资源的元信息(结构)&lt;br&gt;OPTIONS：获取使用者可以对资源进行的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总的来说，就是，客户端使用HTTP协议的几种方法，让服务器端的资源的表现层发生“状态转化”。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-REST特征&quot;&gt;&lt;a href=&quot;#3-REST特征&quot; class=&quot;headerlink&quot; title=&quot;3.REST特征&quot;&gt;&lt;/a&gt;3.REST特征&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;采用客户端/服务器模式&lt;/li&gt;
&lt;li&gt;所有必要的信息要在客户端发出的请求中。服务器不能在两次请求之间保存客户端的任何状态。&lt;/li&gt;
&lt;li&gt;服务器发出的响应可以标记为可缓存或不可缓存，出于优化目的，客户端可以使用缓存。&lt;/li&gt;
&lt;li&gt;客户端访问服务器资源时使用的协议必须一致。&lt;/li&gt;
&lt;li&gt;客户端和服务器之间可按需插入代理服务器、缓存或网关。&lt;/li&gt;
&lt;li&gt;客户端可从服务器上下载代码，在客户端的环境中执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-REST四个基本原则：&quot;&gt;&lt;a href=&quot;#4-REST四个基本原则：&quot; class=&quot;headerlink&quot; title=&quot;4.REST四个基本原则：&quot;&gt;&lt;/a&gt;4.REST四个基本原则：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用HTTP动词。&lt;/li&gt;
&lt;li&gt;无状态连接，服务器端不应保存过多上下文状态，即每个请求都是独立的。&lt;/li&gt;
&lt;li&gt;为每个资源设置URI。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过XML JSON进行数据传递。&lt;/p&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;API-应用程序接口-API-Application-Program-Interface&quot;&gt;&lt;a href=&quot;#API-应用程序接口-API-Application-Program-Interface&quot; class=&quot;headerlink&quot; title=&quot;API:应用程序接口(API:Application Program Interface)&quot;&gt;&lt;/a&gt;API:应用程序接口(API:Application Program Interface)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;API的实质是一些封装好的函数，它是操作系统提供给应用程序的一个调用接口，调用这个接口能使操作系统去执行应用程序的命令（动作）。可以说它是软件制定的功能访问接口.&lt;/strong&gt;&lt;br&gt;（例如你自己写了一个类，这个类里有很多函数，如果用户要使用你这个类，但是只知道这个函数的入口参数和返回值即只知道这个函数是做什么用的，对于用户来说你这些函数就是API。）&lt;/p&gt;
&lt;h3 id=&quot;作用：&quot;&gt;&lt;a href=&quot;#作用：&quot; class=&quot;headerlink&quot; title=&quot;作用：&quot;&gt;&lt;/a&gt;作用：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;提供应用程序与开发人员基于某软件或硬件的以访问一组例程的能力。&lt;/li&gt;
&lt;li&gt;简化程序员对系统内部的调用。&lt;/li&gt;
&lt;li&gt;实现不同系统之间数据交换。&lt;/li&gt;
&lt;li&gt;实现计算机软件之间的相互通信。&lt;/li&gt;
&lt;li&gt;API的一个主要功能是提供通用功能集。程序员通过调用API函数对应用程序进行开发，可以减轻编程任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;API-设计：&quot;&gt;&lt;a href=&quot;#API-设计：&quot; class=&quot;headerlink&quot; title=&quot;API 设计：&quot;&gt;&lt;/a&gt;API 设计：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在系统中是最外层的接口，是供用户直接调用的。&lt;/li&gt;
&lt;li&gt;稳定。&lt;/li&gt;
&lt;li&gt;定义清楚：方法名应该一目了然，参数数据结构良好，文档丰富清晰。&lt;/li&gt;
&lt;li&gt;多形式：可以用java进行export，以库的形式提供，也可以通过REST的方式进行访问等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;API的四种类型&quot;&gt;&lt;a href=&quot;#API的四种类型&quot; class=&quot;headerlink&quot; title=&quot;API的四种类型:&quot;&gt;&lt;/a&gt;API的四种类型:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;远程过程调用(RPC):通过作用在共享数据缓存器上的过程(或任务)实现程序间的通信。&lt;/li&gt;
&lt;li&gt;标准查询语言(SQL):是标准的访问数据的查询语言，通过数据库实现应用程序间的数据共享。&lt;/li&gt;
&lt;li&gt;文件传输:文件传输通过发送格式化文件实现应用程序间数据共享。&lt;/li&gt;
&lt;li&gt;信息交付:指松耦合或紧耦合应用程序间的小型格式化信息，通过程序间的直接通信实现数据共享。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;REST（Representational-State-Transfer）&quot;&gt;&lt;a href=&quot;#REST（Representational-State-Transfer）&quot; class=&quot;headerlink&quot; title=&quot;REST（Representatio
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 魔法方法</title>
    <link href="http://yoursite.com/2015/12/09/python-%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2015/12/09/python-魔法方法/</id>
    <published>2015-12-08T16:08:12.000Z</published>
    <updated>2016-04-27T13:23:32.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;魔法方法即前后各加两个下划线的名字组成的集合所包含的方法。（如果对象实现了魔法方法中的某一个，那么这个方法会在特殊的情况下被调用） &lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;一、为确保类是新型的，模块最开始要输入赋值语句-metaclass-type，或者直接或间接地子类化内建类object（或其他一些新式类）。&quot;&gt;&lt;a href=&quot;#一、为确保类是新型的，模块最开始要输入赋值语句-metaclass-type，或者直接或间接地子类化内建类object（或其他一些新式类）。&quot; class=&quot;headerlink&quot; title=&quot;一、为确保类是新型的，模块最开始要输入赋值语句__metaclass__=type，或者直接或间接地子类化内建类object（或其他一些新式类）。&quot;&gt;&lt;/a&gt;一、为确保类是新型的，模块最开始要输入赋值语句__metaclass__=type，或者直接或间接地子类化内建类object（或其他一些新式类）。&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;二、构造和初始化&quot;&gt;&lt;a href=&quot;#二、构造和初始化&quot; class=&quot;headerlink&quot; title=&quot;二、构造和初始化&quot;&gt;&lt;/a&gt;二、构造和初始化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.__new__(cls,…):一个对象实例化的时候所调用的第一个方法，它的第一个参数是这个类，其他的参数是用来直接传递给__init__ 方法。&lt;br&gt;2.__init__(self,…):(最基本的魔术方法)&lt;br&gt;这是类的初始化方法，当构造函数被调用的时候的任何参数都将会传给它。&lt;br&gt;3.__del__(self):它定义的是当一个对象进行垃圾回收时候的行为。&lt;br&gt;  当调用 x = SomeClass() 的时候,__init__ 并不是第一个被调用的方法。是__new__来构造这个实例。\&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;三、用于比较的魔术方法&quot;&gt;&lt;a href=&quot;#三、用于比较的魔术方法&quot; class=&quot;headerlink&quot; title=&quot;三、用于比较的魔术方法&quot;&gt;&lt;/a&gt;三、用于比较的魔术方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.__cmp__：最基本的用于比较的魔术方法。它实际上实现了所有的比较符号(&amp;lt;,==,!=,等等)&lt;br&gt;2.__eq__(self, other)：等号, ==&lt;br&gt;3.__ne__(self, other)：不等号, !=&lt;br&gt;4.__lt__(self, other)：小于号,  &amp;lt;&lt;br&gt;5.__gt__(self, other)：大于等于号,&amp;gt;= \&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;四、数值处理的魔术方法&quot;&gt;&lt;a href=&quot;#四、数值处理的魔术方法&quot; class=&quot;headerlink&quot; title=&quot;四、数值处理的魔术方法&quot;&gt;&lt;/a&gt;四、数值处理的魔术方法&lt;/h3&gt;&lt;p&gt;一元操作符和函数：仅仅有一个操作位的一元操作符和函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__pos__(self)：正号&lt;br&gt;__neg__(self)：负号&lt;br&gt;__abs__(self)：实现内置abs()函数的行为&lt;br&gt;__invert__(self) ：~ 符号\&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;五、普通算数操作符&quot;&gt;&lt;a href=&quot;#五、普通算数操作符&quot; class=&quot;headerlink&quot; title=&quot;五、普通算数操作符&quot;&gt;&lt;/a&gt;五、普通算数操作符&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;__add__(self, other)：加法&lt;br&gt;__sub__(self, other)：减法&lt;br&gt;__mul__(self, other)：乘法&lt;br&gt;__floordiv__(self, other)：地板除法，使用//操作符&lt;br&gt;__div__(self, other)：传统除法，使用/操作符&lt;br&gt;__truediv__(self, other)：真正除法。注意，只有当from __future__ import division时才会有效&lt;br&gt;__mod__(self, other)：求模，使用%操作符&lt;br&gt;__divmod__(self, other)：实现内建函数divmod()的行为&lt;br&gt;__pow__(self, other)：乘方，使用**操作符&lt;br&gt;__lshift__(self, other)：左按位位移，使用&amp;lt;&amp;lt;操作符&lt;br&gt;__rshift__(self, other)：右按位位移，使用&amp;gt;&amp;gt;操作符&lt;br&gt;__and__(self, other)：按位与，使用&amp;amp;操作符&lt;br&gt;__or__(self, other)：按位或，使用|操作符&lt;br&gt;__xor__(self, other)：按位异或，使用^操作符\&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;六、反射算术操作符&quot;&gt;&lt;a href=&quot;#六、反射算术操作符&quot; class=&quot;headerlink&quot; title=&quot;六、反射算术操作符&quot;&gt;&lt;/a&gt;六、反射算术操作符&lt;/h3&gt;&lt;p&gt;改变操作数的位置关系，大多数情况下，反射算术操作的结果等价于常规算术操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__radd__(self, other)：反射加法&lt;br&gt;__rsub__(self, other)：反射减法&lt;br&gt;__rmul__(self, other)：反射乘法&lt;br&gt;__rfloordiv__(self, other)：反射地板除，用//操作符&lt;br&gt;__rdiv__(self, other)：传统除法，用/操作符&lt;br&gt;__rturediv__(self, other)：真实除法，注意，只有当from __future__ import division时才会有效&lt;br&gt;__rmod__(self, other)：反射求模，用%操作符&lt;br&gt;__rdivmod__(self,other)：实现内置函数divmod()的长除行为，当调用divmod(other,self)时被调用&lt;br&gt;__rpow__(self, other)：反射乘方，用**操作符&lt;br&gt;__rlshift__(self, other)：反射的左按位位移，使用&amp;lt;&amp;lt;操作符&lt;br&gt;__rrshift__(self, other)：反射的右按位位移，使用&amp;gt;&amp;gt;操作符&lt;br&gt;__rand__(self, other)：反射的按位与，使用&amp;amp;操作符&lt;br&gt;__ror__(self, other)：反射的按位或，使用|操作符&lt;br&gt;__rxor__(self, other)：反射的按位异或，使用^操作符\&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;七、增量赋值&quot;&gt;&lt;a href=&quot;#七、增量赋值&quot; class=&quot;headerlink&quot; title=&quot;七、增量赋值&quot;&gt;&lt;/a&gt;七、增量赋值&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;__iadd__(self, other)：加法和赋值&lt;br&gt;__isub__(self, other)：减法和赋值&lt;br&gt;__imul__(self, other)：乘法和赋值&lt;br&gt;__ifloordiv__(self, other)：地板除和赋值，用//=操作符&lt;br&gt;__idiv__(self, other)：传统除法和赋值，用/=操作符&lt;br&gt;__iturediv__(self, other)：真实除法和赋值，注意，只有当from __future__ import division时才会有效&lt;br&gt;__imod__(self, other)：求模和赋值，用%=操作符&lt;br&gt;__ipow__(self, other)：乘方和赋值，用**=操作符&lt;br&gt;__ilshift__(self, other)：左按位位移和赋值，使用&amp;lt;&amp;lt;=操作符&lt;br&gt;__irshift__(self, other)：右按位位移和赋值，使用&amp;gt;&amp;gt;=操作符&lt;br&gt;__iand__(self, other)：按位与和赋值，使用&amp;amp;=操作符&lt;br&gt;__ior__(self, other)：按位或和赋值，使用|=操作符&lt;br&gt;__ixor__(self, other)：按位异或和赋值，使用^=操作符\&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;八、类型转换&quot;&gt;&lt;a href=&quot;#八、类型转换&quot; class=&quot;headerlink&quot; title=&quot;八、类型转换&quot;&gt;&lt;/a&gt;八、类型转换&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;__int__(self)：实现到整型的类型转换&lt;br&gt;__long__(self)：长整形&lt;br&gt;__float__(self)：浮点型&lt;br&gt;__complex__(self)：复数型&lt;br&gt;__oct__(self)：8进制型&lt;br&gt;__hex__(self)：16进制型&lt;br&gt;__index__(self)：实现一个当对象被切片到int的类型转换。若自定义了一个数值类型，考虑到它可能被切片，要重载__index__&lt;br&gt;__trunc__(self)：当math.trunc(self)被调用时调用。返回一个整型的截断&lt;br&gt;__coerce__(self,other)：实现混合模式的算术。如果类型转换不可能则返回None。否则，它应当返回一对相同类型的元祖\&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;九、描述类&quot;&gt;&lt;a href=&quot;#九、描述类&quot; class=&quot;headerlink&quot; title=&quot;九、描述类&quot;&gt;&lt;/a&gt;九、描述类&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在类中自定义内建函数返回类行为的描述&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__str__(self)：定义行为&lt;br&gt;__repr__(self)：定义行为。&lt;br&gt;&lt;strong&gt;str()和repr()主要的区别在于它的阅读对象。repr()产生的输出主要为计算机可读，而str()则是为了让人类可读。&lt;/strong&gt;&lt;br&gt;__unicode__(self)：定义行为。&lt;br&gt;&lt;strong&gt;unicode()像是str(),但它返回一个unicode字符串。如果你的类中的一个实例调用了str(),而你仅定义了__unicode__(),那它是不会工作的。以防万一，你应当总是定义好 __str__()，哪怕用户不会使用unicode&lt;/strong&gt;&lt;br&gt;__hash__(self)：定义行为。它必须返回一个整型，而且它的结果是用于来在字典中作为快速键比对。&lt;br&gt;__nonzero__(self)：定义行为。返回True或False，取决于你是否考虑一个实例是True或False。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;十、属性访问控制&quot;&gt;&lt;a href=&quot;#十、属性访问控制&quot; class=&quot;headerlink&quot; title=&quot;十、属性访问控制&quot;&gt;&lt;/a&gt;十、属性访问控制&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;__getattr__(self, name)：用户在试图访问不存在（不论是存在或尚未建立）的类属性时定义其行为&lt;br&gt;__setattr__(self, name, value)：允许你为一个属性赋值&lt;br&gt;__delattr__：删除类属性（当在__delattr__中调用del self.name会引起无限递归）&lt;br&gt;__getattribute__(self, name)：允许你定规则，在任何时候不管一个类属性的值那时候是否可访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;十一、隐藏在容器背后的魔法&quot;&gt;&lt;a href=&quot;#十一、隐藏在容器背后的魔法&quot; class=&quot;headerlink&quot; title=&quot;十一、隐藏在容器背后的魔法&quot;&gt;&lt;/a&gt;十一、隐藏在容器背后的魔法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;__len__(self)：返回容器的长度&lt;br&gt;__getitem__(self, key)：定义当某一个item被访问时的行为，使用self[key]表示法。&lt;br&gt;__setitem__(self, key, value)：定义当某一个item被赋值时候的行为，使用self[key]=value表示法。&lt;br&gt;__delitem__(self, key)：定义当某一个item被删除（例如 del self[key]）时的行为。&lt;br&gt;__iter__(self)：应该给容器返回一个迭代器。迭代器会返回若干内容,大多使用内建函数iter()表示。当一个容器使用形如for x in container:的循环。迭代器本身就是其对象，同时也要定义好一个__iter__方法来返回自身。&lt;br&gt;__reversed__(self)：定义调用内建函数reversed()时的行为。应返回一个反向版本的列表。&lt;br&gt;__contains__(self, item)：__contains__为成员关系，用in和not in测试时定义的行为&lt;br&gt;__concat__(self, other)：定义序列和另外一个序列的连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;十二、反射&quot;&gt;&lt;a href=&quot;#十二、反射&quot; class=&quot;headerlink&quot; title=&quot;十二、反射&quot;&gt;&lt;/a&gt;十二、反射&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;__instancecheck__(self, instance)：检查一个实例是否是你定义类中的一个实例(比如，isinstance(instance, class))&lt;br&gt;__subclasscheck__(self, subclass)：检查一个类是否是你定义类的子类比如，issubclass(subclass, class)）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;十三、可调用对象&quot;&gt;&lt;a href=&quot;#十三、可调用对象&quot; class=&quot;headerlink&quot; title=&quot;十三、可调用对象&quot;&gt;&lt;/a&gt;十三、可调用对象&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;__call__(self, [args…])：允许类实例像函数一样被调用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;十四、构建描述符对象&quot;&gt;&lt;a href=&quot;#十四、构建描述符对象&quot; class=&quot;headerlink&quot; title=&quot;十四、构建描述符对象&quot;&gt;&lt;/a&gt;十四、构建描述符对象&lt;/h3&gt;&lt;p&gt;描述符可以改变其他对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__get__(self, instance, owner)：描述符的值被取回时定义其行为。instance是owner对象的一个实例，owner是所有类。&lt;br&gt;__set__(self, instance, value)：描述符的值被改变时定义其行为。instance是owner对象的一个实例，value是设置的描述符的值&lt;br&gt;__delete__(self, instance)：描述符的值被删除时定义其行为。instance是owner对象的一个实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;十五、Pickling自定义的对象&quot;&gt;&lt;a href=&quot;#十五、Pickling自定义的对象&quot; class=&quot;headerlink&quot; title=&quot;十五、Pickling自定义的对象&quot;&gt;&lt;/a&gt;十五、Pickling自定义的对象&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;__getinitargs__(self)：当类unpickled时调用__init__，可以定义__getinitargs__，该方法返回一个元组的参数，然后传递给__init__。（旧式类）&lt;br&gt;__getnewargs__(self)：进行unpickling时将参数传递到__new__。该方法返回一个元组参数，然后能传递给__new__。 （新式类）&lt;br&gt;__getstate__(self)：代替对象的__dict__属性被保存。&lt;br&gt;__setstate__(self, state)：对象unpickled时，如果__setstate__定义对象状态会传递来代替直接用对象的__dict__属性。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;魔法方法即前后各加两个下划线的名字组成的集合所包含的方法。（如果对象实现了魔法方法中的某一个，那么这个方法会在特殊的情况下被调用） &lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;一、为确保类是新型的，模块最开始要输入赋值语句-metacla
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 模块与包</title>
    <link href="http://yoursite.com/2015/11/30/python%20%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/"/>
    <id>http://yoursite.com/2015/11/30/python 模块与包/</id>
    <published>2015-11-29T16:33:53.000Z</published>
    <updated>2016-03-16T07:44:34.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、模块&quot;&gt;&lt;a href=&quot;#一、模块&quot; class=&quot;headerlink&quot; title=&quot;一、模块&quot;&gt;&lt;/a&gt;一、模块&lt;/h3&gt;&lt;p&gt;模块是一些自我包含并且有组织的代码片段，它可能是一个包含数据成员和方法的类，也可能是一组相关但彼此独立的操作函数。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;二、模块与文件&quot;&gt;&lt;a href=&quot;#二、模块与文件&quot; class=&quot;headerlink&quot; title=&quot;二、模块与文件&quot;&gt;&lt;/a&gt;二、模块与文件&lt;/h3&gt;&lt;p&gt;一个文件被看作是一个独立模块，一个模块也可以被看作是一个文件。模块的文件名就是模块名字加扩展名.py,&lt;br&gt;1、模块名称空间：一个名称空间就是一个从名称到对象的关系映射集合。每个模块都定义了它自己的唯一的名称空间，所以在不同模块间不会出现名称交叉。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;三、名称空间&quot;&gt;&lt;a href=&quot;#三、名称空间&quot; class=&quot;headerlink&quot; title=&quot;三、名称空间&quot;&gt;&lt;/a&gt;三、名称空间&lt;/h3&gt;&lt;p&gt;名称空间是名称（标识符）到对象的映射。&lt;br&gt;1、在执行期间有两或三个活动的名称空间：局部名称空间（不断变化）、全局名称空间、内建名称空间。解释器首先加载内建名称空间，随后加载执行模块的全局名称空间，它会在模块开始执行后变为活动名称空间，这样就有了两个活动的名称空间。&lt;br&gt;2、名称空间与变量作用域：名称空间是纯粹意义上的名字与对象的映射关系，而作用域指出了用户代码可访问这些名字的物理量。&lt;br&gt;3、名称查找：解释器先从局部名称空间找，再从全局名称空间找，然后从内建名称空间里找。若都失败了，就会返回错误。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;四、导入模块&quot;&gt;&lt;a href=&quot;#四、导入模块&quot; class=&quot;headerlink&quot; title=&quot;四、导入模块&quot;&gt;&lt;/a&gt;四、导入模块&lt;/h3&gt;&lt;p&gt;1、import语句：如果在一个模块的顶层导入，其作用域就是全局的，如果在函数中导入，其作用域就是局部的。&lt;br&gt;2、from-import语句：可在模块里导入指定的模块属性，即把指定名称导入到当前作用域。&lt;br&gt;3、多行导入：从一个模块导入许多属性时，import行会越来越长，直至自动换行，且需要一个\。&lt;br&gt;4、from import （as）：使用自己想要的名字来替换模块的原始名称。&lt;br&gt;5、模块导入的特性：（1）导入模块的顶层代码将直接被执行。&lt;br&gt;（2）无论一个模块被导入多少次，它都只被加载一次。（加载第一次导入）&lt;br&gt;（3）用from-import可把名字导入当前名称空间，所以不需要使用属性/句点属性标知来访问模块的标识符。&lt;br&gt;（4）只从模块导入名字会使那些名字成为局部名称空间的一部分，这可能导致覆盖一个已经存在的具有相同名字的对象。且改变这些变量只影响它局部拷贝而非导入模块的原始名称空间。&lt;br&gt;（5）从ZIP归档文件导入模块。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;五、模块内建函数&quot;&gt;&lt;a href=&quot;#五、模块内建函数&quot; class=&quot;headerlink&quot; title=&quot;五、模块内建函数&quot;&gt;&lt;/a&gt;五、模块内建函数&lt;/h3&gt;&lt;p&gt;1、import ()：模块导入。&lt;br&gt;2、globals()、locals() ：包含当前全局符号表的名字的字典/包含局部符号表的名字的字典&lt;br&gt;3、reload()：重新导入一个已经导入的模块，其参数必须是模块自身而不是包含模块名的字符串&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;六、包&quot;&gt;&lt;a href=&quot;#六、包&quot; class=&quot;headerlink&quot; title=&quot;六、包&quot;&gt;&lt;/a&gt;六、包&lt;/h3&gt;&lt;p&gt;包是一个有层次的文件目录结构，它定义了一个由模块和子包组成的python应用程序执行环境。包也使用句点属性标知来访问它们的函数。&lt;br&gt;1、绝对导入：导入子包会导致与真正的标准库模块（事实上是它们的名字）发生冲突，会把名字相同的标准库模块隐藏掉。这些名字必须通过Python路径来访问。&lt;br&gt;2、相对导入：只用于from-import语句，明确在子包中某个模块的位置。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、模块&quot;&gt;&lt;a href=&quot;#一、模块&quot; class=&quot;headerlink&quot; title=&quot;一、模块&quot;&gt;&lt;/a&gt;一、模块&lt;/h3&gt;&lt;p&gt;模块是一些自我包含并且有组织的代码片段，它可能是一个包含数据成员和方法的类，也可能是一组相关但彼此独立的操作函数。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解 python 面向对象</title>
    <link href="http://yoursite.com/2015/11/13/python%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2015/11/13/python 面向对象总结/</id>
    <published>2015-11-13T14:35:12.000Z</published>
    <updated>2016-04-20T14:04:54.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象:&quot;&gt;&lt;/a&gt;对象:&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;对象是要研究的任何事物,它不仅能表示具体的事物，还能表示抽象的东西。类是在对象之上的抽象，对象则是类的具体化，是类的实例。&lt;/strong&gt;&lt;br&gt;1.一个对象用数据值来描述它的状态。&lt;br&gt;2.用于改变对象的状态，对象及其操作就是对象的行为。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;类：&quot;&gt;&lt;a href=&quot;#类：&quot; class=&quot;headerlink&quot; title=&quot;类：&quot;&gt;&lt;/a&gt;类：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;类可以对具有相同数据和方法的对象（即属性相近的对象）描述或定义。类是现实世界的抽象的实体以编程形式出现，实例是这些对象的具体化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类，实际上也是一种数据结构，像元组，列表那些。当我们定义了一个类，实际上相当于&lt;strong&gt;自己创建一个数据类型&lt;/strong&gt;。而元组、列表等，这些数据类型其实相当于python内建的数据类型。&lt;/p&gt;
&lt;p&gt;就像函数那样，python也有许多内建函数，但往往我们还要自己定义函数。&lt;/p&gt;
&lt;p&gt;所以这就是面向对象编程和函数编程。面向对象编程就是新建一些封装了行为的对象（类型），函数编程就是新定义一些封装了对象（类型）的行为。&lt;/p&gt;
&lt;p&gt;1.定义类：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ClassName(bases):           #类定义也和函数定义类似
    &amp;apos;class documentation string&amp;apos;
    class_suite  #类体。包含所有声明语句、类成员定义、数据属性、和函数。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当一个类定义完之后，就产生了一个类对象。而实例化是产生出一个类对象的实例，称作实例对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基类就是一个或多个用于继承的父类的集合。&lt;/li&gt;
&lt;li&gt;类通常在一个模块的顶层进行定义。想想，如果它相当于元组、列表这些数据类型，那肯定要早早定义才能像‘内建数据类型’（元组等）那样正常使用。&lt;/li&gt;
&lt;li&gt;声明和定义的区别：看上面那串伪代码，含class关键字的头行和第二行类文档字符串就是声明，类体就是定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.类定义完成后可通过类对象来访问类的属性和方法。实例化后，可以通过实例对象来访问属性和方法，栗子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class bird:
    name = &amp;apos;Jack&amp;apos;
    age = 18
b = bird()
print b.name,b.age`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里定义了一个鸟类。有姓名、年龄属性。&lt;br&gt;b=bird()实例化了一个对象b，然后就可通过b来读取属性。(这里的name和age是公有的，可在类外通过对象名直接访问，如果想定义成私有的，需在前面加2个下划线。)&lt;/p&gt;
&lt;p&gt;为了更好地理解实例化，举一个列表的栗子：（上面说过类和它们一样是一种数据类型）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里大概谁都能看得懂发生了什么，就是创建了一个列表‘a’，也就相当于:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = list()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样看起来就和类的实例化很像了吧，所以实例化其实也就是这么个意思。其实只要把类想象成像列表那样的‘内建数据类型’，一切关于类的东西就很好理解了。&lt;/p&gt;
&lt;p&gt;所以才说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在python中，一切皆对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类是对象，列表、元组等也是对象。类定义完后产生了一个类对象，于是你也可以把元组看成‘元组对象’，把列表看成‘列表对象’。&lt;/p&gt;
&lt;p&gt;2.类属性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;属性就是属于另一个对象的数据或者函数元素，可以通过句点属性标识法来访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类属性仅仅与其被定义的类相绑定，类属性分为数据属性和函数属性（方法）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数据属性就是所定义的类的变量。&lt;/strong&gt;它们像其他变量一样在类创建后被使用，它们可以由类中的方法更新，也可以在主程序的其他地方更新。&lt;/p&gt;
&lt;p&gt;这种变量也叫静态变量，或者是静态数据，它们与它们所属的类对象绑定，不依赖与任何类实例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class C(object):
...    foo = 100
&amp;gt;&amp;gt;&amp;gt; print C.foo
100
&amp;gt;&amp;gt;&amp;gt; C.foo = C.foo + 1
&amp;gt;&amp;gt;&amp;gt; print C.foo
101
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;函数属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在类中也可以定义函数，这些函数就是方法。不难理解，像列表那些类型也有许多方法，那么这个自己创建的类型自然也能自己定义方法。&lt;/p&gt;
&lt;p&gt;方法是作为类定义的一部分，在类中定义的函数，这使得方法也成为类的属性。即这些方法也仅能应用于所属的类型的对象的实例上。&lt;/p&gt;
&lt;p&gt;方法通过句点属性标识法与它的实例绑定。注意：它是一个方法，属于一个类，而不是全局空间中的名字。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class MyClass(object):
        def myNoActionMethod(self):
            pass

&amp;gt;&amp;gt;&amp;gt; mc = Myclass()
&amp;gt;&amp;gt;&amp;gt; mc.myNoActionMethod()    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有实例，方法是不能被调用的。方法必须绑定（到一个实例）才能直接被调用。即上面的栗子不能通过Myclass.myNoActionMethod()调用，这也不难理解，就像你不会list.append()来调用append()方法，而是会先创建一个列表实例。&lt;/li&gt;
&lt;li&gt;方法的第一个参数必须是self，无论是否用到。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法是与类对象或实例对象进行绑定了的，而函数没有与对象绑定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类的内置方法:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;__init__ :构造方法（ 初始化对象）&lt;br&gt;__del__:析构方法（释放对象）&lt;br&gt;__new__:生成实例&lt;br&gt;__getattr__: 获取属性的值&lt;br&gt;__setattr__:设置属性的值&lt;br&gt;__delattr__:删除name属性&lt;br&gt;__getitem__: 获取序列的索引对应的值&lt;br&gt;__cmp__:比较两个对象&lt;br&gt;__call__:把实例对象作为函数调用     等等等等….&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.特殊的类属性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C.__name__: 类C的名字（字符串形式）&lt;br&gt;C.&lt;em&gt;\&lt;/em&gt;\doc__:类C的文档字符串&lt;br&gt;C.&lt;em&gt;\&lt;/em&gt;\bases__:类C的所有父类构成的元组&lt;br&gt;C.&lt;em&gt;\&lt;/em&gt;\dict__:类C的属性&lt;br&gt;C.&lt;em&gt;\&lt;/em&gt;\module__:类C定义所在的模块&lt;br&gt;C.&lt;em&gt;\&lt;/em&gt;\class__:实例C对应的类（仅新式类中）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.实例/实例属性(待加)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类属性和实例属性:(待加)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类属性是类对象所拥有的，被所有类对象的实例对象所共有,另外可通过类对象和实例对象访问。在类外修改类属性，须通过类对象去引用后再修改。如通过实例对象去引用，会产生一个同名的实例属性，修改的是实例属性非类属性。如果通过实例对象去引用该名称的属性，实例属性会强制屏蔽类属性（即引用的是实例属性)。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;继承：-待改&quot;&gt;&lt;a href=&quot;#继承：-待改&quot; class=&quot;headerlink&quot; title=&quot;继承：(待改)&quot;&gt;&lt;/a&gt;继承：(待改)&lt;/h3&gt;&lt;p&gt;类别本身还可以进一步细分成子类，子类通过继承享有了父类的所有属性（数据属性和方法）。通过继承，减少了程序中的重复信息和重复语句。另外，子类也可以覆盖父类同名的变量和方法。&lt;br&gt;1.子类继承父类所有的公有属性和方法，可在子类中通过父类名来调用，而对于私有的属性和方法，子类不进行继承，因此在子类中无法通过父类名来访问。&lt;br&gt;2.继承的特点：&lt;br&gt;（1）如果父类和子类都重新定义了构造方法__init__，在进行子类实例化的时候，子类的构造方法不会自动调用父类的构造方法，必须在子类中显示调用。&lt;br&gt;（2）在调用基类的方法时，需要加上基类的类名前缀（以 父类名.方法 这种方式调用），且需要带上self参数变量。而在类中调用普通函数时并不需要带上self参数&lt;br&gt;（3）Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。&lt;br&gt;3.在传统类中，如果子类和父类中同名的方法或者属性，在查找的时候基本遵循自左到右，深度优先的原则。新式类中，则采用“广度优先”的方式去查找属性。&lt;br&gt;4.在类层次中，子类继承了多个父类的数据结构和方法，那么它就被称作”多重继承”（如果有多个父类，多个父类名之间用逗号隔开）。&lt;br&gt;5.关于继承的构造函数：&lt;br&gt;（1）若子类没有定义自己的构造函数，父类的构造函数会被默认调用，但是此时如果要实例化子类的对象，则只能传入父类的构造函数对应的参数。&lt;br&gt;（2）若子类定义了自己的构造函数，而没有显示调用父类的构造函数，则父类的属性不会被初始化。&lt;br&gt;（3）若子类定义了自己的构造函数，显示调用父类，子类和父类的属性都会被初始化。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;多态：-待改&quot;&gt;&lt;a href=&quot;#多态：-待改&quot; class=&quot;headerlink&quot; title=&quot;多态：(待改)&quot;&gt;&lt;/a&gt;多态：(待改)&lt;/h3&gt;&lt;p&gt;不同的对象，收到同一消息可以产生不同的结果，每个对象以适合自身的方式去响应共同的消息。允许将父对象设置成为和它的子对象相等，使得能够利用同一类(基类)类型的指针来引用不同类的对象,以及根据所引用对象的不同,以不同的方式执行相同的操作并获得不同的结果.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;封装：-信息隐藏-待改&quot;&gt;&lt;a href=&quot;#封装：-信息隐藏-待改&quot; class=&quot;headerlink&quot; title=&quot;封装：(信息隐藏) (待改)&quot;&gt;&lt;/a&gt;封装：(信息隐藏) (待改)&lt;/h3&gt;&lt;p&gt;把类的属性和方法封装在类中，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。就是只提供调用接口，但是不公布实现细节。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;新式类和经典类：待改&quot;&gt;&lt;a href=&quot;#新式类和经典类：待改&quot; class=&quot;headerlink&quot; title=&quot;新式类和经典类：待改)&quot;&gt;&lt;/a&gt;新式类和经典类：待改)&lt;/h3&gt;&lt;p&gt;1.新型类默认的元类为type，经典类默认类型为types.ClassType&lt;br&gt;2.新型类是在Python2.2中引入的，所有的新式类必须继承至少一个父类，如果类没有继承任何其他父类，则object将作为默认的父类。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象:&quot;&gt;&lt;/a&gt;对象:&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;对象是要研究的任何事物,它不仅能表示具体的事物，还能表示抽象的东西。类是在对象之上的抽象，对象则是类的具体化，是类的实例
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 数据结构类型总结</title>
    <link href="http://yoursite.com/2015/11/05/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2015/11/05/python数据类型结构总结/</id>
    <published>2015-11-04T17:09:12.000Z</published>
    <updated>2016-04-04T12:42:36.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;字符串：&quot;&gt;&lt;a href=&quot;#字符串：&quot; class=&quot;headerlink&quot; title=&quot;字符串：&quot;&gt;&lt;/a&gt;字符串：&lt;/h3&gt;&lt;p&gt;1.用引号来创建字符串,单双引号都可(三引号也可：三引号可以复制复杂的字符串,三引号内一个字符串可占多行,字符串中可包含换行符、制表符和其他特殊字符)。&lt;br&gt;eg.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;var1 = &amp;apos;Hello!&amp;apos;\n\r  
&amp;gt;&amp;gt;&amp;gt;var2 = &amp;quot;Hi!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.不支持单字符类型,单字符作为一个字符串使用。&lt;br&gt;3.访问字符串的值,用方括号来截取字符串,通过索引获取字符,索引从0开始。&lt;br&gt;eg.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;var1 = &amp;apos;Hello!&amp;apos;
&amp;gt;&amp;gt;&amp;gt;var2 = &amp;quot;Python&amp;quot;
&amp;gt;&amp;gt;&amp;gt;print &amp;quot;var1[0]: &amp;quot;, var1[0]
var1[0]: H
&amp;gt;&amp;gt;&amp;gt;print &amp;quot;var2[1:5]: &amp;quot;, var2[1:5]
var2[1:5]: ytho
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.可以对已存在的字符串进行修改,并赋值给另一个变量&lt;br&gt;eg.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;var1 = &amp;apos;Hello World!&amp;apos;
&amp;gt;&amp;gt;&amp;gt;print &amp;quot;Updated String :- &amp;quot;, var1[:6] + &amp;apos;Python&amp;apos;
Updated String :-  Hello Python
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.需要在字符中使用特殊字符时,用 \ 转义字符。&lt;br&gt;6.还有许多字符串运算符需要记住。&lt;br&gt;7.字符串格式化:将一个值插入到一个有字符串格式符 %s 的字符串中&lt;br&gt;8.Unicode字符串&lt;br&gt;9.字符串内建函数&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;列表：&quot;&gt;&lt;a href=&quot;#列表：&quot; class=&quot;headerlink&quot; title=&quot;列表：&quot;&gt;&lt;/a&gt;列表：&lt;/h3&gt;&lt;p&gt;1.用方括号[]把数据项括起来&lt;br&gt;2.不同的数据项用逗号分隔。&lt;br&gt;3.数据项不需要有相同的类型。&lt;br&gt;4.索引从0开始,可截取，组合。&lt;br&gt;eg.&lt;br&gt;    list1=[‘a’]；&lt;br&gt;5.用下标索引来访问列表中的值,也可使用方括号截取字符&lt;br&gt;eg.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;list=[1,2,3,4,5]；
&amp;gt;&amp;gt;&amp;gt;print&amp;quot;list[0]:&amp;quot;, list[0]
list[0]:1
&amp;gt;&amp;gt;&amp;gt;print&amp;quot;list[1:3]:&amp;quot;, list[1:3]
list[1:3]:[2,3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.修改，更新列表的数据项，可用append()方法来添加列表项(并未完全弄懂)&lt;br&gt;7.在列表前输入del 语句可删除列表的的元素&lt;br&gt;8.列表脚本操作符&lt;br&gt;9.列表函数和方法&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;元祖：&quot;&gt;&lt;a href=&quot;#元祖：&quot; class=&quot;headerlink&quot; title=&quot;元祖：&quot;&gt;&lt;/a&gt;元祖：&lt;/h3&gt;&lt;p&gt;1.用小括号()&lt;br&gt;2.用逗号分隔&lt;br&gt;3.元素不能修改(与列表不同)&lt;br&gt;4.可创建空元祖  tup1 = ();&lt;br&gt;5.元组中只有一个元素时,需在元素后加逗号&lt;br&gt;6.下标索引从0开始，可以进行截取，组合,当索引为负数时,则是反向读取。&lt;br&gt;7.虽不可修改元素但可修改元祖(连接组合)&lt;br&gt;eg.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;tup1 = (1,2); 
&amp;gt;&amp;gt;&amp;gt;tup2 = (&amp;apos;a&amp;apos;,&amp;apos;b&amp;apos;); 
&amp;gt;&amp;gt;&amp;gt;tup3 = tup1 + tup2; 
&amp;gt;&amp;gt;&amp;gt;print tup3;
(1,2,&amp;apos;a&amp;apos;,&amp;apos;b&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8.元祖前输入del可删除整个元组&lt;br&gt;9.元祖运算符&lt;br&gt;10.任意无符号的对象,以逗号隔开,都默认为元组&lt;br&gt;11.元祖内置函数&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;字典：&quot;&gt;&lt;a href=&quot;#字典：&quot; class=&quot;headerlink&quot; title=&quot;字典：&quot;&gt;&lt;/a&gt;字典：&lt;/h3&gt;&lt;p&gt;1.整体放在{}中&lt;br&gt;2.字典由键和对应值成对组成,每个键与值用冒号(:)隔开,每一对用逗号分割&lt;br&gt;3.键必须独一无二(若同一个键被赋值两次，后一个值会被记住),值则不必.键必须不可变,所以可以用数,字符串或元组充当,用列表不行&lt;br&gt;4.值可以取任何数据类型,但必须是不可变的,如字符串,数,元组&lt;br&gt;5.字典可存储任意类型对象&lt;br&gt;6.访问字典里的值:用[]把键括住&lt;br&gt;7.可修改,增加,删除键,值对,还可直接删除字典 del()&lt;br&gt;8.字典内置函数和方法&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;集合：&quot;&gt;&lt;a href=&quot;#集合：&quot; class=&quot;headerlink&quot; title=&quot;集合：&quot;&gt;&lt;/a&gt;集合：&lt;/h3&gt;&lt;p&gt;1.由于集合没有自己的语法格式，只能通过集合的工厂方法set()和frozenset()创建&lt;br&gt;2.与列表和元组不同,集合用于包含一组无序的对象,所以不能为集合创建索引或切片操作,可用in、not in来访问或判断集合元素.还有,集合中的元素不能重复.&lt;br&gt;eg.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;s = set([1,2,3,4])      #创建一个数值集合  
&amp;gt;&amp;gt;&amp;gt;t = set(&amp;quot;Hello&amp;quot;)        #创建一个唯一字符的集合  
&amp;gt;&amp;gt;&amp;gt;t  
set([&amp;apos;H&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;o&amp;apos;])  #只有一个l`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.集合分为可变集合和不可变集合.&lt;br&gt;(1)可变集合：可添加和删除元素,不能用作字典的键,也不能做其他集合的元素&lt;br&gt;(2)不可变集合：与可变集合相反&lt;br&gt;4.更新集合：s.add() ，s.update()，s.remove() （只有可变集合才能更新）&lt;br&gt;del:删除集合&lt;br&gt;5.集合类型操作:in和not in，集合等价与不等价(==, !=)，子集和超集，联合(|)，交集(&amp;amp;)，查补(-)，对称差分(^)&lt;br&gt;6.集合的内建函数和方法&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符串：&quot;&gt;&lt;a href=&quot;#字符串：&quot; class=&quot;headerlink&quot; title=&quot;字符串：&quot;&gt;&lt;/a&gt;字符串：&lt;/h3&gt;&lt;p&gt;1.用引号来创建字符串,单双引号都可(三引号也可：三引号可以复制复杂的字符串,三引号内一个字符串可占多行,字符串中可包含换行
    
    </summary>
    
    
  </entry>
  
</feed>
